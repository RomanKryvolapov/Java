package com.company;
/*
 made by Roman Kryvolapov
 Тест многопоточности Java

 Без синхронизации метода mainIterator условие inerator % 180 == 0 срабатывает не каждые 180 символов,
 из за чего переход на новую строку System.out.println() вызывается раньше или позже


|||||||||||||||||||||||||||||||||------------------------------||-|||||||||---------------------||||
|||||||||||||||||||||||||||||||||||||||||||||||--------------------------|||||||||||||||||||||||||||-
----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------
|||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


 С синхронизацией метода метода mainIterator условие inerator % 180 == 0 условие inerator % 180 == 0
 срабатывает каждые 180 символов, вызывая переход на новую строку каждые 180 символов


---------------------------------------------------------------------------------------------------|
-----||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||---------------------
----------------------------------------------------------------------------------------------------
---------------||||||||||||||||||||||||||||||||||---------------------------------------------------
--------------------------------------------------------------------------------||||||||||||||||||||


При добавлении Thread.yield(); методы | и - чередуются с большей частотой


-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-||||||-|-|-
|-|-|-|-|-|-|-|-|-|-|-||||-|-|-|-|-|-|-|-|-|-||-||||||||||||||||||-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-||||||||||-|-||||||||


*/

public class Main{

    static volatile int inerator = 0;
    static final int cycles = 180000;

    public static void main(String[] args) throws Exception{
        Digit1 digit1 = new Digit1();
        Digit2 digit2 = new Digit2();
        digit1.start();
        digit2.start();
        digit1.join();
        digit2.join();
        System.out.println();
        System.out.println();
    }

    static synchronized void mainIterator (String b){
        inerator++;
        System.out.print(b);
        if (inerator % 100 == 0) {
            System.out.println();
        }
    }
}

class Digit1 extends Thread{
    @Override
    public void run(){
        Digits.writeDigit("-");
    }
}

class Digit2 extends Thread{
    @Override
    public void run() {
        Digits.writeDigit("|");
    }
}

class Digits{
    static void writeDigit(String a){
        while (Main.inerator<Main.cycles) {
                Main.mainIterator(a);
                //Thread.yield();
        }
    }
}

